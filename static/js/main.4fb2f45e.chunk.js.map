{"version":3,"sources":["reducers/personajesReducer.js","reducers/index.js","types/index.js","store.js","actions/personajesActions.js","components/Header.js","context/ModalContext.js","components/Personaje.js","components/Personajes.js","App.js","serviceWorker.js","index.js"],"names":["initialState","personajes","error","loading","personajeAFiltrar","combineReducers","state","action","type","payload","filter","personaje","name","store","createStore","reducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","f","filtrarPersonaje","mostrarPersonajes","dispatch","a","getData","Axios","get","respuesta","desargaPersonajesExito","data","results","descargaPersonajesError","Header","useState","setPersonaje","useDispatch","agregarPersonajes","crearNuevosPersonajes","useSelector","Navbar","className","length","Button","onClick","Form","onSubmit","e","preventDefault","trim","inline","FormControl","placeholder","value","onChange","target","ModalContext","createContext","ModalProvider","props","idPersonaje","setIdPersonaje","personajeElegido","setPersonajeElegido","useEffect","url","axios","resultado","obtenerPersonaje","Provider","children","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Personaje","modalStyle","open","setOpen","classes","useContext","Card","style","margin","key","id","Img","variant","src","image","Body","Title","Text","species","status","Modal","onClose","alt","gender","Personajes","Container","Row","map","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4fb2f45e.chunk.js","sourcesContent":["import {\n  MOSTRAR_PERSONAJES,\n  MOSTRAR_PERSONAJES_EXITO,\n  MOSTRAR_PERSONAJES_ERROR,\n\n  FILTRAR_PERSONAJES,\n} from '../types';\n\n\nconst initialState = {\n  personajes: [],\n  error: false,\n  loading: false,\n  personajeAFiltrar: null,\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type){\n    case MOSTRAR_PERSONAJES:\n      return {\n        ...state,\n        loading: action.payload \n      }\n      case MOSTRAR_PERSONAJES_EXITO:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        personajes: action.payload\n      }\n      case MOSTRAR_PERSONAJES_ERROR:\n        return {\n          ...state,\n          loading: false,\n          error: action.payload\n        }\n    case FILTRAR_PERSONAJES:\n      return {\n        ...state,\n        personajes: state.personajes.filter(personaje => action.payload.personaje === personaje.name),\n        loading: true,\n      }\n    default: \n    return state;\n  }\n}","import {combineReducers} from 'redux';\nimport personajesReducer from './personajesReducer';\n\nexport default combineReducers({\n  personajes: personajesReducer\n});","export const MOSTRAR_PERSONAJES = 'MOSTRAR_PERSONAJES';\nexport const MOSTRAR_PERSONAJES_EXITO = 'MOSTRAR_PERSONAJES_EXITO';\nexport const MOSTRAR_PERSONAJES_ERROR = 'MOSTRAR_PERSONAJES_ERROR';\n\nexport const FILTRAR_PERSONAJES = 'FILTRAR_PERSONAJES';\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nconst store = createStore(\n  reducer, \n  compose(applyMiddleware(thunk),\n\n  typeof window === 'object' && \n    typeof window.__REDUX_DEVTOOLS_EXTENSION__ !==  'undefined' ?\n      window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n  )\n);\n\nexport default store;","import {\n  MOSTRAR_PERSONAJES,\n  MOSTRAR_PERSONAJES_EXITO,\n  MOSTRAR_PERSONAJES_ERROR,\n\n  FILTRAR_PERSONAJES,\n} from '../types';\n\nimport Axios from 'axios'\n\nexport function  crearNuevosPersonajes(personaje){\n  return (dispatch) => {\n    dispatch(filtrarPersonaje(personaje))\n  };\n};\n\nconst filtrarPersonaje = (personajeAFiltrar) => ({\n  type: FILTRAR_PERSONAJES,\n  payload: personajeAFiltrar\n})\n\n\nexport function mostrarPersonajes (){\n  return async (dispatch) => {\n    dispatch(getData());\n    try {\n      const respuesta = await Axios.get('https://rickandmortyapi.com/api/character')\n      dispatch(desargaPersonajesExito(respuesta.data.results))\n    } catch (error) {\n      dispatch(descargaPersonajesError())\n    }\n  }\n}\n\nconst getData = () => ({\n  type: MOSTRAR_PERSONAJES, \n  payload: true,\n})\n\nconst desargaPersonajesExito = personajes => ({\n  type: MOSTRAR_PERSONAJES_EXITO,\n  payload: personajes,\n}) \n\nconst descargaPersonajesError = () => ({\n  type: MOSTRAR_PERSONAJES_ERROR,\n  payload: true,\n})\n\n","import React, {useState} from 'react';\nimport { Navbar, Form, FormControl, Button } from 'react-bootstrap'\n\n// actions de Redux\nimport { crearNuevosPersonajes } from '../actions/personajesActions';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { mostrarPersonajes } from '../actions/personajesActions'\n\n\nconst Header = () => {\n\n  // state del componente\n  const [personaje, setPersonaje    ] = useState('');\n\n  // utilizar useDispatch\n  const dispatch = useDispatch();\n  const cargarDatos = () => dispatch(mostrarPersonajes())\n\n  // ejecutar el action\n  const agregarPersonajes = personaje => dispatch(crearNuevosPersonajes(personaje))\n\n  // cuando se haga submit \n  const submitPersonajes = e => {\n    e.preventDefault();\n    // validar formulario\n    if(personaje.trim() === ''){\n      return;\n    }\n    // si hay errores\n    // crear personajes\n    agregarPersonajes({ \n      personaje,\n    })\n  };\n\n  const personajes = useSelector(state => state.personajes)\n\n  return ( \n    <Navbar className=\"bg-light justify-content-between\">\n        <h1>API Rick And Morty</h1>\n      {personajes.personajes.length <2 ? \n        <Button onClick={cargarDatos} type=\"submit\">Ver todos</Button>\n      : null\n      }\n      <Form onSubmit={submitPersonajes} inline>\n        <FormControl \n          type=\"text\" \n          placeholder=\"Search\" \n          className=\" mr-sm-2\" \n          name=\"personaje\"\n          value={personaje}\n          onChange={e => setPersonaje(e.target.value)}\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n    </Navbar>\n   );\n}\n \nexport default Header;","import React, { createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\n\nexport const ModalContext = createContext();\n\nconst ModalProvider = (props) => {\n\n  const [idPersonaje, setIdPersonaje] = useState(null)\n  const [personajeElegido, setPersonajeElegido] = useState({})\n\n  useEffect(() => {\n    const obtenerPersonaje =  async () => {\n      if(!idPersonaje) return;\n      const url = `https://rickandmortyapi.com/api/character/${idPersonaje}`\n      const resultado = await axios.get(url);\n      setPersonajeElegido(resultado.data)\n    }\n    obtenerPersonaje()\n  }, [idPersonaje]);\n\n  return (\n\n    <ModalContext.Provider\n      value={{\n        personajeElegido,\n        setIdPersonaje\n      }}\n    >\n      {props.children}\n    </ModalContext.Provider>\n  )\n}\n\nexport default ModalProvider;","import React, {useContext, useState} from 'react';\nimport {Card, Button} from 'react-bootstrap';\nimport { ModalContext } from '../context/ModalContext'\n\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 600,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst Personaje = ({personaje}) => {\n\n  // configuracion del modal material ui\n  const [ modalStyle ] = useState(getModalStyle);\n  const [ open, setOpen ] = useState(false);\n  const classes = useStyles();\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const {personajeElegido, setIdPersonaje } = useContext(ModalContext);\n  return ( \n    <Card style={{ width: '20rem', margin:'2%' }} key={personaje.id}>\n      <Card.Img variant=\"top\" src={personaje.image} />\n      <Card.Body>\n        <Card.Title>{personaje.name}</Card.Title>\n        <Card.Text>\n        <span>Especie: {personaje.species}, Estatus: {personaje.status}</span>\n        </Card.Text>\n        <Button \n          onClick={() => {\n            setIdPersonaje(personaje.id)\n            handleOpen();\n          }}\n          variant=\"primary\"\n        >\n          Mas info...\n        </Button>\n        <Modal\n          open={open}\n          onClose={() => {\n            handleClose(); \n            setIdPersonaje(null); \n            setIdPersonaje({})\n          }}\n        >\n          <div style={ modalStyle} className={classes.paper}>\n            <h2>{personajeElegido.name}</h2>\n            <img className=\"img-fluid my-4\" src={personajeElegido.image} alt=\"imagen\"/>\n            <h3 className=\"mt-4\">Datos</h3>\n            <p>Genero: {personajeElegido.gender}</p>\n            <p>Tipo: {personajeElegido.type}</p>\n            <p>Status: {personajeElegido.status}</p>\n          </div>\n        </Modal>\n      </Card.Body>\n    </Card>\n  );\n}\n \nexport default Personaje;","import React, { useEffect } from 'react';\nimport {Container, Row} from 'react-bootstrap'\n\nimport Personaje from './Personaje'\n\n// Redux\nimport {useDispatch, useSelector}  from 'react-redux'\nimport { mostrarPersonajes } from '../actions/personajesActions'\n\nconst Personajes = () => {\n\n  const dispatch = useDispatch();\n\n  useEffect(()=> {\n    // consultar API \n    const cargarDatos = () => dispatch(mostrarPersonajes())\n    cargarDatos();\n  }, [])\n\n  const personajes = useSelector(state => state.personajes)\n  return ( \n    <Container>\n      <Row>\n        {personajes.personajes.map(personaje => (\n         <Personaje key={personaje.id} personaje={personaje}/>\n        ))}\n      </Row>\n    </Container>\n   );\n}\n \nexport default Personajes;","import React from 'react';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// components\nimport Header from './components/Header';\nimport Personajes from './components/Personajes';\n\nimport ModalProvider from './context/ModalContext';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ModalProvider>\n        <Header></Header>\n        <Personajes></Personajes>\n      </ModalProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}